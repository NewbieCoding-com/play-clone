name: Build Binary


on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:

  createrelease:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: "marvinpinto/action-automatic-releases@latest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "MacOS & Windows Build"
          draft: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  buildBinaries:
    name: Build  packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            TARGET: ubuntu
            CMD_BUILD: >
              sudo apt-get install -y libssl-dev openssl &&
              ./build.sh dev_embed && mkdir -p dist && cp target/release/play dist/play
            OUT_FILE_NAME: play
            ASSET_MIME: application/octet-stream
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
              bash build.sh dev_embed && mkdir -p dist && cp target/release/play dist/play
            OUT_FILE_NAME: play
            ASSET_MIME: application/octet-stream
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: >
              bash build.sh dev_embed && mkdir -p dist && cp target/release/play.exe dist/play.exe
            OUT_FILE_NAME: play.exe
            ASSET_MIME: application/octet-stream
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: "-A warnings"
      - name: Build play for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}

